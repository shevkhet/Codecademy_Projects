# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:

# EXERCICE 1

# Test your function with the data stored in damages.

def convert_damages(damage_list):
    table = {'B': 1000000000, 'M': 1000000}
    converted_list = []
    value = 0

    for index in damage_list :
        if index[-1] == 'B' or index[-1] == 'M':
            value = float(index[:len(index)-1]) * table[index[-1]]
            converted_list.append(value)
        else: 
            converted_list.append(index)
    return converted_list

exercice_1 = convert_damages(damages)
print(exercice_1)

# EXERCICE 2

# write your construct hurricane dictionary function here:

def hurricanes_dict():
    dict_hurricane = {} 
    for i in range(len(names)):
        dict_hurricane.update({names[i]: {'Name': names[i], 'Years': years[i], 'Month': months[i], 'Max sustained Winds': max_sustained_winds[i], 'Areas affected': areas_affected[i], 'Damages': damages[i], 'Death': deaths[i]}})
    return dict_hurricane

exercice_2 = hurricanes_dict()
print(exercice_2)        

# EXERCICE 3

# write your construct hurricane by year dictionary function here:

def year_order(listing):
    listing_year = {}
    year_value = 0
    for element in listing.values():
        year_value = element['Years']
        if year_value not in listing_year:
            listing_year.update({year_value: [element]})
        else:
            listing_year[year_value].append(element)
    return listing_year

exercice_3 = year_order(exercice_2)
print(exercice_3)
print(exercice_3[1932])

# EXERCICE 4

# write your count affected areas function here:

def count_zone(dict):
    dict_zone = {}
    for element in dict.values():
        area = element['Areas affected']
        for zone in area:
            if zone not in dict_zone.keys():
                dict_zone.update({zone: 1})
            else: 
                dict_zone[zone] += 1
    return dict_zone

exercice_4 = count_zone(exercice_2)
print(exercice_4)

# EXERCICE 5

# write your find most affected area function here:

def most_affected(dict):
    zone = ''
    record = 0
    for (areas_affected, number) in dict.items():
        if number > record:
            record = number
            zone = areas_affected
    return (zone, record)

exercice_5 = most_affected(exercice_4)
print(exercice_5)

# EXERCICE 6

# Write your greatest number of deaths function here:

def most_killing(dict):
    record_death = 0
    record_name = ''
    for element in dict.values():
        death_toll = element['Death']
        if death_toll > record_death:
            record_death = death_toll
            record_name = element['Name']
    return (record_name, record_death)

exercice_6 = most_killing(exercice_2)
print(exercice_6)


# EXERCICE 7

mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}

def scale_death(dict):
    scale = 0
    dict_scale ={}
    for element in dict.values():
        if element['Death'] > mortality_scale[4]:
            scale = 4
        elif element['Death'] > mortality_scale[3]:
            scale = 3
        elif element['Death'] > mortality_scale[2]:
            scale = 2
        elif element['Death'] > mortality_scale[1]:
            scale = 1
        elif element['Death'] > mortality_scale[0]:
            scale = 0
        
        if scale not in dict_scale.keys():
            dict_scale.update({scale: [element['Name']]})
        else:
            dict_scale[scale].append(element['Name'])
    return dict_scale

exercice_7 = scale_death(exercice_2)
print(exercice_7)

# EXERCICE 8

# Test your function on your hurricane dictionary.

def costly(dict): 
    name_costly = ''
    max_cost = 0
    value = 0
    table = {'B': 1000000000, 'M': 1000000}
    for element in dict.values():
        index_last = element['Damages'][-1]
        index_begin = element['Damages'][:len(element['Damages'])-1]
        if index_last == 'B' or index_last == 'M':
            value = float(index_begin) * table[index_last]
        else: 
            value = 0
        
        if value > max_cost:
            max_cost = value
            name_costly = element['Name']
    return (name_costly, max_cost)

exercice_8 = costly(exercice_2)
print(exercice_8)
        
# EXERCICE 9

damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}

def scale_cost(dict):
    dict_scale= {}
    value = 0
    table = {'B': 1000000000, 'M': 1000000}
    scale = 0

    for element in dict.values():
        index_last = element['Damages'][-1]
        index_begin = element['Damages'][:len(element['Damages'])-1]
        if index_last == 'B' or index_last == 'M':
            value = float(index_begin) * table[index_last]
        else: 
            value = 0
        
        if value > damage_scale[4]:
            scale = 4
        elif value > damage_scale[3]:
            scale = 3
        elif value > damage_scale[2]:
            scale = 2
        elif value > damage_scale[1]:
            scale = 1
        elif value >= damage_scale[0]:
            scale = 0
        
        if scale not in dict_scale.keys():
            dict_scale.update({scale: [element['Name']]})
        else:
            dict_scale[scale].append(element['Name'])
    return dict_scale    

exercice_9 = scale_cost(exercice_2)
print(exercice_9)       
